import turtle
from random import *
from math import *
#This code draws a pie chart that has multiple segments. The size of the segments depend on the numbers entered at the keyboard


#Angle of a whole circle
WHOLE_CIRCLE = 360 # a circle has an angle of 360

#declaring constants for colors
MIN_COLOR = 128
MAX_COLOR = 255
length = WHOLE_CIRCLE + 1 # We want at most 360 numbers, so we initialize it to 361 or what ever maximum you choose + 1

#We let the user select a radius for the circle
radius = int(input("\nEnter a radius of the pie chart between 100 and 500 : "))

#We loop while the list of numbers entered is is greater in number than our WHOLE_CIRCLE 
while length > WHOLE_CIRCLE :
	segments = input("\nEnter a list of integer numbers separated by spaces : ").split(" ")
	length = len(segments) # Length of the list generated by the numbers entered
	if length > WHOLE_CIRCLE : 
		print("\nYou cannot enter more than ",WHOLE_CIRCLE," numbers.\nPlease try again !");
total = 0;
angles = [] #The array of angles that each number will occupy

""" 
We convert the different numbers received as strings into actual numbers, then we sum them up so that we can calculate 
what fraction of the total circle will that specific number occupy
"""
for i in range(length) : 
    total += int(segments[i])#We are adding up the numbers to get a sum
#For a start since we are adapting the code that printed a pie chart for three numbers, we will use three angles
angle1=angle2=angle3=0

#Now we compute the angles for each fraction of a number to the total sum
for i in range(length) : 
    portion = (float(segments[i]) ) 
    angles.append( round((portion/total)*(WHOLE_CIRCLE)) )
    #Now we generate random colours for each angle	
    
   
#We need to keep track of how much angles we have painted so far
angle_painted = 0;


#Let's draw and paint the first segments in the circle in case we have more than one number entered

#We start by generating random red green and blue values to make the color
r = randint(MIN_COLOR,MAX_COLOR)
g = randint(MIN_COLOR,MAX_COLOR)
b = randint(MIN_COLOR,MAX_COLOR)
angle1 = angles[0] # first angle
turtle.colormode(255) # choose color pallette to accept rgb values between 0 and 255 inclusive
couple = turtle.screensize() #not needed
screen_length = couple[0]
screen_width = couple[1]
turtle.screensize(screen_length*3, screen_width*3)
if radius > screen_length or radius > screen_width : #If the radius is greater than the screen length or the radius is greater than the screen width, then we adjust the radius to the size of the screen
	old_radius = radius
	radius = floor((min(screen_length,screen_width))/2)
	print("\nYour chosen radius ",old_radius," was larger than the dimensions of your screen, so we adjusted it for you.\nNew radius = ",radius)
turtle.penup()
turtle.goto((-1*radius),(-1*radius));#We do not want to start at the middle. We want to start at the lower left of the screen
xorigin = turtle.xcor()#save x coordinate of origin
yorigin = turtle.ycor() # save y coordinate of origin
turtle.pendown()
turtle.hideturtle()
# draw the first portion of the circle and paint it in a random colour
turtle.fillcolor((r,g,b)) # choose the colour of the circle
print("\nColour selected for number entered ",segments[0]," = ", ( '#%02x%02x%02x' % (r,g,b)), " angle = ",angles[0])
turtle.begin_fill()# start painting in chosen colour
turtle.circle(radius,angle1) #draw the one portion circle and fill it
angle_painted += angle1
turtle.left(90)
turtle.forward(radius)
turtle.setheading(270)
xmiddle = turtle.xcor()#save x coordinate of middle
ymiddle = turtle.ycor() # save y coordinate of middle
turtle.forward(radius)
turtle.end_fill() # Stop the painting
turtle.penup() # lift pencil

# we only draw more than one section if we had more than one number given

if length > 1 : 
	for i in range(1, length-1):
	  
		angle1=angles[i-1]
		angle2=angles[i]
		#Now we draw the second one third of the circle 
		turtle.goto(xorigin,yorigin) # Go to origin
		turtle.setheading(90) # Face up towards the top of the screen
		turtle.forward(radius)
		angle_turn = (abs(angle_painted-180))
		#We turn right or left after drawing the first segment of the circle
		if angle_painted < 180 : 
			turtle.right(angle_turn) #turn right
		else :
			 turtle.left(angle_turn)

		r = randint(MIN_COLOR,MAX_COLOR)
		g = randint(MIN_COLOR,MAX_COLOR)
		b = randint(MIN_COLOR,MAX_COLOR)
		turtle.pendown() #press the pen down
		turtle.fillcolor((r,g,b)) # choose the colour of the circle randomly
		print("\nColour selected for number entered ",segments[i]," = ", ( '#%02x%02x%02x' % (r,g,b)), " angle = ",angles[i])
		turtle.begin_fill()# start painting in green
		turtle.forward(radius) # move by radius distance
		turtle.left(90) #turn left by 90
		turtle.circle(radius,angle2) #Paint a one third circle 
		turtle.left(90)#turn left by 90 degrees
		turtle.forward(radius)
		turtle.setheading(0)#Face towards the east, right of the screen
		turtle.left(30)
		turtle.end_fill()
		turtle.penup()#We pull the pen up
		angle_painted += angles[i]

	# Now we draw the third circle
	r = randint(MIN_COLOR,MAX_COLOR)
	g = randint(MIN_COLOR,MAX_COLOR)
	b = randint(MIN_COLOR,MAX_COLOR)
	turtle.goto(xorigin,yorigin) # We go back to the origin
	angle3 = angles[length-1]
	turtle.setheading(180) # We are facing west
	turtle.fillcolor((r,g,b)) # choose the colour of the circle
	print("\nColour selected for number entered ",segments[length-1]," = ", ( '#%02x%02x%02x' % (r,g,b)), " angle = ",angles[length-1])
	turtle.pendown()
	turtle.begin_fill()# start filling
	turtle.circle(-1*radius,angle3) #The negative sign is to tell turtle to draw the circle the anti clockwise
	turtle.right(90) # Turn right
	turtle.forward(radius) # Move forward
	turtle.setheading(270) # Face downwards
	turtle.forward(radius) # Move forward by radius pixels
	turtle.end_fill() # Stop filling
	#End of painting
	
turtle.penup()  # Remove the pen from the paper
angle_painted += angles[length-1]
#Prevents turtle from closing the window
turtle.done()

